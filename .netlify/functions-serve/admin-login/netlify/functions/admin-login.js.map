{
  "version": 3,
  "sources": ["../../../../../../projects/Crepe_Phahon_Yothin35/netlify/functions/admin-login.ts"],
  "sourceRoot": "C:/Users/Aetoros/AppData/Local/Temp/tmp-22748-IV8b1bk9tQfA",
  "sourcesContent": ["import type { Handler } from '@netlify/functions';\r\n\r\n// Simple admin login mock with debug output. Replace with real auth as needed.\r\nconst allowedOrigins = [\r\n  'http://localhost:8888',\r\n  'http://localhost:3000',\r\n  'http://127.0.0.1:8888',\r\n  'https://crepephahonyothin35.netlify.app'\r\n];\r\n\r\nconst corsHeaders = (origin: string | undefined) => {\r\n  const allowOrigin = origin && allowedOrigins.includes(origin) ? origin : '*';\r\n  return {\r\n    'Access-Control-Allow-Origin': allowOrigin,\r\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    'Content-Type': 'application/json'\r\n  } as Record<string, string>;\r\n};\r\n\r\nexport const handler: Handler = async (event) => {\r\n  const headers = corsHeaders(event.headers?.origin);\r\n\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return { statusCode: 200, headers, body: JSON.stringify({ ok: true }) };\r\n  }\r\n\r\n  if (event.httpMethod !== 'POST') {\r\n    return { statusCode: 405, headers, body: JSON.stringify({ error: 'Method Not Allowed' }) };\r\n  }\r\n\r\n  let body: { username?: string; password?: string } = {};\r\n  try {\r\n    body = event.body ? JSON.parse(event.body) : {};\r\n  } catch {\r\n    return { statusCode: 400, headers, body: JSON.stringify({ error: 'Invalid JSON' }) };\r\n  }\r\n\r\n  const { username, password } = body;\r\n\r\n  // Debug output - echo limited info (never echo raw password in production)\r\n  const debug = {\r\n    receivedAt: new Date().toISOString(),\r\n    method: event.httpMethod,\r\n    path: event.path,\r\n    hasBody: !!event.body,\r\n    username\r\n  };\r\n\r\n  // Mock check\r\n  const isValid = username === 'admin' && password === 'admin123';\r\n\r\n  if (!isValid) {\r\n    return {\r\n      statusCode: 401,\r\n      headers,\r\n      body: JSON.stringify({ ok: false, debug, error: 'Invalid credentials' })\r\n    };\r\n  }\r\n\r\n  // Return a simple mock token for testing\r\n  const mockToken = 'mock-admin-jwt.' + Math.random().toString(36).slice(2);\r\n  return {\r\n    statusCode: 200,\r\n    headers,\r\n    body: JSON.stringify({ ok: true, debug, token: mockToken, role: 'admin' })\r\n  };\r\n};\r\n\r\n\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,IAAM,iBAAiB;AAAA,EACrB;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF;AAEA,IAAM,cAAc,CAAC,WAA+B;AAClD,QAAM,cAAc,UAAU,eAAe,SAAS,MAAM,IAAI,SAAS;AACzE,SAAO;AAAA,IACL,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AACF;AAEO,IAAM,UAAmB,OAAO,UAAU;AAC/C,QAAM,UAAU,YAAY,MAAM,SAAS,MAAM;AAEjD,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO,EAAE,YAAY,KAAK,SAAS,MAAM,KAAK,UAAU,EAAE,IAAI,KAAK,CAAC,EAAE;AAAA,EACxE;AAEA,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO,EAAE,YAAY,KAAK,SAAS,MAAM,KAAK,UAAU,EAAE,OAAO,qBAAqB,CAAC,EAAE;AAAA,EAC3F;AAEA,MAAI,OAAiD,CAAC;AACtD,MAAI;AACF,WAAO,MAAM,OAAO,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC;AAAA,EAChD,QAAQ;AACN,WAAO,EAAE,YAAY,KAAK,SAAS,MAAM,KAAK,UAAU,EAAE,OAAO,eAAe,CAAC,EAAE;AAAA,EACrF;AAEA,QAAM,EAAE,UAAU,SAAS,IAAI;AAG/B,QAAM,QAAQ;AAAA,IACZ,aAAY,oBAAI,KAAK,GAAE,YAAY;AAAA,IACnC,QAAQ,MAAM;AAAA,IACd,MAAM,MAAM;AAAA,IACZ,SAAS,CAAC,CAAC,MAAM;AAAA,IACjB;AAAA,EACF;AAGA,QAAM,UAAU,aAAa,WAAW,aAAa;AAErD,MAAI,CAAC,SAAS;AACZ,WAAO;AAAA,MACL,YAAY;AAAA,MACZ;AAAA,MACA,MAAM,KAAK,UAAU,EAAE,IAAI,OAAO,OAAO,OAAO,sBAAsB,CAAC;AAAA,IACzE;AAAA,EACF;AAGA,QAAM,YAAY,oBAAoB,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,MAAM,CAAC;AACxE,SAAO;AAAA,IACL,YAAY;AAAA,IACZ;AAAA,IACA,MAAM,KAAK,UAAU,EAAE,IAAI,MAAM,OAAO,OAAO,WAAW,MAAM,QAAQ,CAAC;AAAA,EAC3E;AACF;",
  "names": []
}
