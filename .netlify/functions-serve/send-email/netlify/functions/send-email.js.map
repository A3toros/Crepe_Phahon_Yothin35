{
  "version": 3,
  "sources": ["../../../../../../projects/Crepe_Phahon_Yothin35/netlify/functions/send-email.ts"],
  "sourceRoot": "C:/Users/Aetoros/AppData/Local/Temp/tmp-22748-84j5YhmQmrii",
  "sourcesContent": ["import type { Handler } from '@netlify/functions';\r\n\r\nexport const handler: Handler = async (event) => {\r\n  const jsonHeaders: Record<string, string> = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    'Content-Type': 'application/json',\r\n  };\r\n  const textHeaders: Record<string, string> = {\r\n    'Access-Control-Allow-Origin': '*',\r\n    'Access-Control-Allow-Methods': 'POST, OPTIONS',\r\n    'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n    'Content-Type': 'text/plain',\r\n  };\r\n\r\n  if (event.httpMethod === 'OPTIONS') {\r\n    return {\r\n      statusCode: 200,\r\n      headers: textHeaders,\r\n      body: '',\r\n    };\r\n  }\r\n\r\n  if (event.httpMethod !== 'POST') {\r\n    return { statusCode: 405, headers: textHeaders, body: 'Method not allowed' };\r\n  }\r\n\r\n  try {\r\n    const emailData = JSON.parse(event.body || '{}');\r\n\r\n    if (!emailData.to || !emailData.subject || !emailData.html) {\r\n      return { statusCode: 400, headers: textHeaders, body: 'Missing required fields' };\r\n    }\r\n\r\n    const brevoApiKey = process.env.BREVO_API_KEY;\r\n    if (!brevoApiKey) {\r\n      console.error('BREVO_API_KEY not found');\r\n      return { statusCode: 500, headers: textHeaders, body: 'Email service not configured' };\r\n    }\r\n\r\n    const emailPayload = {\r\n      sender: {\r\n        name: emailData.fromName || 'Crepe Phahon Yothin35',\r\n        email: emailData.from || process.env.EMAIL_FROM || 'noreply@crepephahonyothin35.netlify.app',\r\n      },\r\n      to: [\r\n        {\r\n          email: emailData.to,\r\n          name: emailData.to,\r\n        },\r\n      ],\r\n      subject: emailData.subject,\r\n      htmlContent: emailData.html,\r\n      textContent: emailData.text || '',\r\n      replyTo: {\r\n        email: emailData.from || process.env.EMAIL_FROM || 'noreply@crepephahonyothin35.netlify.app',\r\n        name: emailData.fromName || 'Crepe Phahon Yothin35',\r\n      },\r\n    };\r\n\r\n    const resp = await fetch('https://api.brevo.com/v3/smtp/email', {\r\n      method: 'POST',\r\n      headers: {\r\n        'api-key': brevoApiKey,\r\n        'Content-Type': 'application/json',\r\n        Accept: 'application/json',\r\n      },\r\n      body: JSON.stringify(emailPayload),\r\n    });\r\n\r\n    if (!resp.ok) {\r\n      const error = await resp.text();\r\n      console.error('Brevo API error:', error);\r\n      return { statusCode: 500, headers: jsonHeaders, body: JSON.stringify({ success: false, error }) };\r\n    }\r\n\r\n    const result = await resp.json();\r\n\r\n    return {\r\n      statusCode: 200,\r\n      headers: jsonHeaders,\r\n      body: JSON.stringify({ success: true, messageId: result.messageId }),\r\n    };\r\n  } catch (error: any) {\r\n    console.error('Email service error:', error?.message || error);\r\n    return { statusCode: 500, headers: textHeaders, body: 'Internal server error' };\r\n  }\r\n};\r\n\r\n// Note: Do not export default; Netlify looks for named `handler` export."],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEO,IAAM,UAAmB,OAAO,UAAU;AAC/C,QAAM,cAAsC;AAAA,IAC1C,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AACA,QAAM,cAAsC;AAAA,IAC1C,+BAA+B;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,gBAAgB;AAAA,EAClB;AAEA,MAAI,MAAM,eAAe,WAAW;AAClC,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM;AAAA,IACR;AAAA,EACF;AAEA,MAAI,MAAM,eAAe,QAAQ;AAC/B,WAAO,EAAE,YAAY,KAAK,SAAS,aAAa,MAAM,qBAAqB;AAAA,EAC7E;AAEA,MAAI;AACF,UAAM,YAAY,KAAK,MAAM,MAAM,QAAQ,IAAI;AAE/C,QAAI,CAAC,UAAU,MAAM,CAAC,UAAU,WAAW,CAAC,UAAU,MAAM;AAC1D,aAAO,EAAE,YAAY,KAAK,SAAS,aAAa,MAAM,0BAA0B;AAAA,IAClF;AAEA,UAAM,cAAc,QAAQ,IAAI;AAChC,QAAI,CAAC,aAAa;AAChB,cAAQ,MAAM,yBAAyB;AACvC,aAAO,EAAE,YAAY,KAAK,SAAS,aAAa,MAAM,+BAA+B;AAAA,IACvF;AAEA,UAAM,eAAe;AAAA,MACnB,QAAQ;AAAA,QACN,MAAM,UAAU,YAAY;AAAA,QAC5B,OAAO,UAAU,QAAQ,QAAQ,IAAI,cAAc;AAAA,MACrD;AAAA,MACA,IAAI;AAAA,QACF;AAAA,UACE,OAAO,UAAU;AAAA,UACjB,MAAM,UAAU;AAAA,QAClB;AAAA,MACF;AAAA,MACA,SAAS,UAAU;AAAA,MACnB,aAAa,UAAU;AAAA,MACvB,aAAa,UAAU,QAAQ;AAAA,MAC/B,SAAS;AAAA,QACP,OAAO,UAAU,QAAQ,QAAQ,IAAI,cAAc;AAAA,QACnD,MAAM,UAAU,YAAY;AAAA,MAC9B;AAAA,IACF;AAEA,UAAM,OAAO,MAAM,MAAM,uCAAuC;AAAA,MAC9D,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,WAAW;AAAA,QACX,gBAAgB;AAAA,QAChB,QAAQ;AAAA,MACV;AAAA,MACA,MAAM,KAAK,UAAU,YAAY;AAAA,IACnC,CAAC;AAED,QAAI,CAAC,KAAK,IAAI;AACZ,YAAM,QAAQ,MAAM,KAAK,KAAK;AAC9B,cAAQ,MAAM,oBAAoB,KAAK;AACvC,aAAO,EAAE,YAAY,KAAK,SAAS,aAAa,MAAM,KAAK,UAAU,EAAE,SAAS,OAAO,MAAM,CAAC,EAAE;AAAA,IAClG;AAEA,UAAM,SAAS,MAAM,KAAK,KAAK;AAE/B,WAAO;AAAA,MACL,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,MAAM,KAAK,UAAU,EAAE,SAAS,MAAM,WAAW,OAAO,UAAU,CAAC;AAAA,IACrE;AAAA,EACF,SAAS,OAAY;AACnB,YAAQ,MAAM,wBAAwB,OAAO,WAAW,KAAK;AAC7D,WAAO,EAAE,YAAY,KAAK,SAAS,aAAa,MAAM,wBAAwB;AAAA,EAChF;AACF;",
  "names": []
}
